// order-table.js - ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ Local Storage ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå
(() => {
    // ‚úÖ ‡∏Ñ‡∏µ‡∏¢‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    const ORDERS_STORAGE_KEY = 'mala_all_orders_v1';
    
    // ‡∏î‡∏∂‡∏á Element ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
    const orderDetailPanel = document.getElementById('orderDetailPanel');
    const orderIdTitle = document.getElementById('orderIdTitle');
    const orderMetaDate = document.querySelector('.order-meta-date');
    const orderMetaTime = document.querySelector('.order-meta-time');
    const orderItemsBody = document.getElementById('orderItemsBody');
    const orderRowTemplate = document.getElementById('orderRowTemplate');
    const orderSpicyChip = document.getElementById('orderSpicyChip');
    const orderTotalCount = document.getElementById('orderTotalCount');
    const orderTotalPrice = document.getElementById('orderTotalPrice');
    const btnCancel = document.querySelector('.btn--cancel');
    const btnConfirm = document.querySelector('.btn--confirm');
    const btnComplete = document.querySelector('.btn--complete'); 
    
    // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° Element ‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏
    const orderNoteDisplay = document.getElementById('orderNoteDisplay');
    
    // Element ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
    const orderListBody = document.getElementById('orderListBody');
    const orderListRowTemplate = document.getElementById('orderListRowTemplate');
    const statusButtons = document.querySelectorAll('.nav-btn-status');

    let allOrders = []; // ‡πÄ‡∏Å‡πá‡∏ö‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡πÇ‡∏´‡∏•‡∏î‡∏°‡∏≤‡∏à‡∏≤‡∏Å Local Storage
    let currentOrder = null;
    let currentFilterStatus = 'all';

    // ----------------------------------------
    // Local Storage Helpers
    // ----------------------------------------

    // ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏´‡∏•‡∏î‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å Local Storage
    function loadAllOrdersFromStorage() {
        try {
            const savedOrdersJSON = localStorage.getItem(ORDERS_STORAGE_KEY);
            return savedOrdersJSON ? JSON.parse(savedOrdersJSON) : [];
        } catch (e) {
            console.error("Error loading all orders from localStorage", e);
            return [];
        }
    }

    // ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏ó‡∏µ‡πà Local Storage
    function saveAllOrdersToStorage(orders) {
        try {
            localStorage.setItem(ORDERS_STORAGE_KEY, JSON.stringify(orders));
        } catch (e) {
            console.error("Error saving all orders to localStorage", e);
        }
    }

    // ----------------------------------------
    // Order List Management
    // ----------------------------------------
    
    // ‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Local Storage ‡πÅ‡∏ó‡∏ô API
    function loadOrders() {
        allOrders = loadAllOrdersFromStorage();
        // ‡∏à‡∏±‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏° ID/‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà ‡∏à‡∏≤‡∏Å‡∏°‡∏≤‡∏Å‡πÑ‡∏õ‡∏ô‡πâ‡∏≠‡∏¢ (‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÉ‡∏´‡∏°‡πà‡∏™‡∏∏‡∏î‡∏≠‡∏¢‡∏π‡πà‡∏ö‡∏ô)
        allOrders.sort((a, b) => b.id - a.id); 
        filterOrders(currentFilterStatus); // ‡πÅ‡∏™‡∏î‡∏á‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
    }

    function renderOrderList(orders) {
        orderListBody.innerHTML = ''; // ‡∏•‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡πà‡∏≤
        updateStatusCount(); // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÉ‡∏ô‡∏õ‡∏∏‡πà‡∏° Filter

        if (orders.length === 0) {
            orderListBody.innerHTML = '<div class="no-orders">‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÉ‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ô‡∏µ‡πâ</div>';
            return;
        }

        orders.forEach(order => {
            const row = orderListRowTemplate.content.querySelector('.order-row').cloneNode(true);
            
            // ‡∏™‡∏£‡πâ‡∏≤‡∏á Element ‡πÉ‡∏´‡∏°‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏Å‡∏≥‡∏´‡∏ô‡∏î Attribute
            row.dataset.id = order.id;
            row.dataset.status = order.status;
            
            row.querySelector('.td-id').textContent = String(order.id).padStart(4, '0');
            // ‡πÅ‡∏õ‡∏•‡∏á Date/Time
            row.querySelector('.td-datetime').textContent = `${order.orderDate || '--'} ${order.orderTime || '--'}`;
            // ‡πÉ‡∏ä‡πâ totalItems ‡πÅ‡∏ó‡∏ô totalCount ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏°‡∏µ‡πÉ‡∏ô‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà
            row.querySelector('.td-qty').textContent = order.totalItems || 0; 
            row.querySelector('.td-price').textContent = order.totalPrice.toFixed(0); 
            
            const statusSpan = row.querySelector('.td-status span');
            const statusText = getStatusText(order.status);
            statusSpan.textContent = statusText;
            statusSpan.className = `status-${order.status}`;
            
            // ‡∏ú‡∏π‡∏Å Event Listener
            row.addEventListener('click', () => selectOrder(order.id));

            orderListBody.appendChild(row);
        });
    }

    function getStatusText(status) {
        switch (status) {
            case 'pending': return '‡∏£‡∏≠‡∏£‡∏±‡∏ö';
            case 'confirmed': return '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥';
            case 'completed': return '‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô';
            case 'cancelled': return '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å';
            default: return '‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö';
        }
    }

    function updateStatusCount() {
        const counts = allOrders.reduce((acc, order) => {
            acc[order.status] = (acc[order.status] || 0) + 1;
            acc['all'] = (acc['all'] || 0) + 1;
            return acc;
        }, {});

        statusButtons.forEach(btn => {
            const status = btn.dataset.status;
            const countEl = btn.querySelector('.status-count');
            countEl.textContent = counts[status] || 0;
        });
    }

    function filterOrders(status) {
        currentFilterStatus = status;
        
        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Active State ‡∏Ç‡∏≠‡∏á‡∏õ‡∏∏‡πà‡∏°
        statusButtons.forEach(btn => {
            btn.classList.remove('active');
            if (btn.dataset.status === status) {
                btn.classList.add('active');
            }
        });

        let filteredOrders = allOrders;
        if (status !== 'all') {
            filteredOrders = allOrders.filter(order => order.status === status);
        }
        
        renderOrderList(filteredOrders);
    }

    function selectOrder(orderId) {
        const order = allOrders.find(o => o.id === orderId);
        if (order) {
            currentOrder = order;
            renderOrderDetail(order);
            
            // ‡∏•‡∏ö class 'selected' ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÅ‡∏ñ‡∏ß‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
            document.querySelectorAll('.order-row').forEach(row => row.classList.remove('selected'));
            // ‡πÄ‡∏û‡∏¥‡πà‡∏° class 'selected' ‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
            document.querySelector(`.order-row[data-id="${orderId}"]`).classList.add('selected');
        }
    }

    // ----------------------------------------
    // Order Detail Management
    // ----------------------------------------

    function clearOrderDetail() {
        currentOrder = null;
        orderDetailPanel.classList.add('empty');
        orderIdTitle.textContent = '‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå';
        orderMetaDate.textContent = '--';
        orderMetaTime.textContent = '--';
        orderSpicyChip.textContent = '';
        orderTotalCount.textContent = '0';
        orderTotalPrice.textContent = '0';
        orderItemsBody.innerHTML = '';
        orderNoteDisplay.textContent = ''; // ‚úÖ ‡∏•‡πâ‡∏≤‡∏á‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏
        updateActionButtons(null);
        document.querySelectorAll('.order-row').forEach(row => row.classList.remove('selected'));
    }

    /** ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ç‡∏≠‡∏á‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å */
    const renderOrderDetail = (order) => {
        orderDetailPanel.classList.remove('empty');
        orderItemsBody.innerHTML = '';

        // 1. ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
        order.items.forEach(item => {
            const rowNode = orderRowTemplate.content.querySelector('.tr--item-detail').cloneNode(true);
            rowNode.querySelector('.td-menu-detail').textContent = item.name;
            rowNode.querySelector('.td-qty-detail').textContent = `${item.qty} ‡πÑ‡∏°‡πâ`;
            rowNode.querySelector('.td-price-detail').textContent = `${item.price} ‡∏ö.`;
            rowNode.querySelector('.td-total-detail').textContent = `${item.total} ‡∏ö.`;
            orderItemsBody.appendChild(rowNode);
        });

        // 2. ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Meta
        orderIdTitle.textContent = `‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå #${String(order.id).padStart(4, '0')}`;
        orderMetaDate.textContent = order.orderDate || '--';
        orderMetaTime.textContent = order.orderTime || '--';
        
        // üéØ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ú‡πá‡∏î
        const spicyText = {
            '0': '‡πÑ‡∏°‡πà‡πÄ‡∏ú‡πá‡∏î',
            '1': '‡πÄ‡∏ú‡πá‡∏î‡∏ô‡πâ‡∏≠‡∏¢',
            '2': '‡πÄ‡∏ú‡πá‡∏î‡∏Å‡∏•‡∏≤‡∏á',
            '3': '‡πÄ‡∏ú‡πá‡∏î‡∏°‡∏≤‡∏Å'
        };
        const spicyLevel = order.spicyLevel || '0'; // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏á
        orderSpicyChip.textContent = spicyText[spicyLevel];

        // üéØ ‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
        orderNoteDisplay.textContent = order.note || '‡πÑ‡∏°‡πà‡∏°‡∏µ';

        // 3. ‡∏™‡∏£‡∏∏‡∏õ‡∏¢‡∏≠‡∏î
        orderTotalCount.textContent = order.totalItems || 0;
        orderTotalPrice.textContent = order.totalPrice.toFixed(0);

        // 4. ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏õ‡∏∏‡πà‡∏° Action
        updateActionButtons(order.status);
    };

    /** ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á‡∏õ‡∏∏‡πà‡∏° Action ‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏Ç‡∏≠‡∏á‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå */
    function updateActionButtons(status) {
        btnCancel.disabled = true;
        btnConfirm.disabled = true;
        btnComplete.disabled = true;

        switch (status) {
            case 'pending':
                btnCancel.disabled = false;
                btnConfirm.disabled = false;
                break;
            case 'confirmed':
                btnCancel.disabled = false;
                btnComplete.disabled = false;
                break;
            // case 'completed' / 'cancelled': ‡∏ó‡∏∏‡∏Å‡∏õ‡∏∏‡πà‡∏°‡∏õ‡∏¥‡∏î
        }
    }

    /** ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÉ‡∏ô Local Storage ‡πÅ‡∏•‡∏∞ UI */
    function updateOrderStatus(orderId, newStatus) {
        const orderIndex = allOrders.findIndex(o => o.id === orderId);
        if (orderIndex === -1) {
            throw new Error(`Order ID ${orderId} not found in state.`);
        }

        allOrders[orderIndex].status = newStatus;
        saveAllOrdersToStorage(allOrders); // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏ó‡∏µ‡πà Local Storage
        
        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï UI
        filterOrders(currentFilterStatus); // ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡∏°‡πà‡∏ï‡∏≤‡∏° Filter
        
        // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÄ‡∏î‡∏¥‡∏°‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
        const updatedOrder = allOrders.find(o => o.id === orderId);
        if (updatedOrder) {
            selectOrder(orderId);
        } else {
            clearOrderDetail(); // ‡∏ñ‡πâ‡∏≤‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏´‡∏≤‡∏¢‡πÑ‡∏õ‡∏à‡∏≤‡∏Å Filter (‡πÄ‡∏ä‡πà‡∏ô ‡∏à‡∏≤‡∏Å pending ‡πÑ‡∏õ completed)
        }
    }

    /** ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏° Action */
    function handleActionButtonClick(newStatus, actionName) {
        if (currentOrder && currentOrder.id) {
            const orderId = currentOrder.id;
            
            try {
                // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ (‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å filterOrders ‡πÅ‡∏•‡∏∞ selectOrder ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß)
                updateOrderStatus(orderId, newStatus);
            

            } catch (error) {
                console.error('Error updating order status:', error);
                
                let message = error.message.includes('not found')
                    ? '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÉ‡∏ô Local Storage'
                    : error.message;

                
                // loadOrders(); // üí° ‡∏•‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ã‡πâ‡∏≥‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô Error ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏î‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤
            }
        }
    }

    // Event Listeners ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏∏‡πà‡∏° Actions
    btnCancel.addEventListener('click', () => handleActionButtonClick('cancelled', '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å'));
    btnConfirm.addEventListener('click', () => handleActionButtonClick('confirmed', '‡∏£‡∏±‡∏ö‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå'));
    btnComplete.addEventListener('click', () => handleActionButtonClick('completed', '‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô'));

    // Event Listeners ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏∏‡πà‡∏° Filter ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
    document.querySelectorAll('.nav-btn-status').forEach(btn => {
        btn.addEventListener('click', (e) => {
            // ‡∏î‡∏∂‡∏á status ‡∏à‡∏≤‡∏Å dataset ‡∏Ç‡∏≠‡∏á‡∏õ‡∏∏‡πà‡∏°‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏Ñ‡∏•‡∏¥‡∏Å
            filterOrders(e.currentTarget.dataset.status);
            
            // ‡∏•‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô Filter
            clearOrderDetail();
        });
    });

    // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤ Order Table
    loadOrders();
    clearOrderDetail(); // ‡∏•‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô

})();